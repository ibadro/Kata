package Core.Конструкции_условные_операторы_и_циклы;
/*Вам дан список ролей и сценарий пьесы в виде массива строчек. Каждая строчка сценария пьесы дана в следующем виде:
Роль: текст
Текст может содержать любые символы.
Напишите метод, который будет группировать строчки по ролям, пронумеровывать их и возвращать результат в виде готового текста (см. пример). Каждая группа распечатывается в следующем виде:
Роль:
i) текст
j) текст2
...
==перевод строки==
i и j -- номера строк в сценарии. Индексация строчек начинается с единицы, выводить группы следует в соответствии с порядком ролей. Переводы строк между группами обязательны, переводы строк в конце текста не учитываются.
Заметим, что вам предстоит обработка огромной пьесы в 50 000 строк для 10 ролей – соответственно, неправильная сборка результирующей строчки может выйти за ограничение по времени.
Обратите внимание еще на несколько нюансов:
имя персонажа может встречаться в строке более одного раза, в том числе с двоеточием;
название одной роли может быть префиксом названия другой роли (например, "Лука" и "Лука Лукич");
роль, у которой нет реплик, тоже должна присутствовать в выходном файле;
в качестве перевода строки надо использовать символ '\n' (перевод строки в стиле UNIX);
будьте внимательны, не добавляйте лишних пробелов в конце строк.
Пример ввода 1:
roles:
Городничий
Аммос Федорович
Артемий Филиппович
Лука Лукич
textLines:
Городничий: Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.
Аммос Федорович: Как ревизор?
Артемий Филиппович: Как ревизор?
Городничий: Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.
Аммос Федорович: Вот те на!
Артемий Филиппович: Вот не было заботы, так подай!
Лука Лукич: Господи боже! еще и с секретным предписаньем!
Пример вывода 1:
Городничий:
1) Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.
4) Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.
Аммос Федорович:
2) Как ревизор?
5) Вот те на!
Артемий Филиппович:
3) Как ревизор?
6) Вот не было заботы, так подай!
Лука Лукич:
7) Господи боже! еще и с секретным предписаньем!*/
public class PZ_2_4_18 {
    public static void main(String[] args) {
//        String[] roles = new String[]{
//                "Городничий",
//                "Аммос Федорович",
//                "Артемий Филиппович",
//                "Лука",
//                "Лука Лукич",
//                "no name"
//        };
//        String[] textLines = new String[]{
//                "Городничий: Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.",
//                "Аммос Федорович: Как ревизор?",
//                "Артемий Филиппович: Как ревизор?",
//                "Городничий: Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.",
//                "Аммос Федорович: Вот те на!",
//                "Артемий Филиппович: Вот не было заботы, так подай!",
//                "Лука Лукич: Господи боже! еще и с секретным предписаньем!",
//                "Лука: Господи боже! Я уронил своё пасхальное яйцо от неожиданности!"
//        };
        System.out.println(printTextPerRole(new String[]{"Городничий", "Аммос Федорович", "Артемий Филиппович", "Лука Лукич"},
                new String[]{"Городничий: Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.",
                        "Аммос Федорович: Как ревизор?",
                        "Аммос: Как ревизор?",
                        "Артемий Филиппович: Как ревизор?",
                        "Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.",
                        "Лука Лукич: Здравствуйте Городничий: Как вы поживаете?",
                        "Артемий Филиппович: Вот не было заботы, так подай!",
                        "Лука: Господи боже! еще и с секретным предписаньем!"})
        );
    }
    public static String printTextPerRole(String[] roles, String[] textLines) {

            StringBuilder result = new StringBuilder();
            for (int v=0; v<roles.length; v++) {
                result.append(roles[v]).append(":").append('\n');
                for (int z = 0; z < textLines.length; z++) {
                    String str = textLines[z];
                    if (str.startsWith(roles[v]+":")) {
                        String str1= str.replaceFirst(roles[v]+":", String.valueOf(z+1) + ")");
                        result.append(str1).append('\n');
                    }
                }
                result.append('\n');
            }
            return String.valueOf(result);
    }
}
//*1) Взять из списка ролей 1ю роль, сформировать строку вида Роль + : + \n
//result.append(roles[i]+ ":" + "\n");
//2) Найти строку начинающуюся (startWith) с Роль:,
//вырезать "Роль:", что осталось пронумеровать и прилепить к результирующей строке
//[i]+")" + textString + \n
//3) Искать следующее вхождение роли и повторить п.2
//4) Если такой роли больше нет, перейти к следующей и повторить п.2 и п.3
//5) Если больше ролей нет вообще - вернуть то, что получилось*/